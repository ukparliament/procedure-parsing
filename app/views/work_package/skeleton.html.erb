<!DOCTYPE html>
<html lang="en-GB">
<head>
    <title>Skeleton</title>

    <meta name="viewport" content="width=device-width">
    <style>
/* Make the SVG fit on the page. */

    svg {
        height: 100%;
        width: 100%;
    }/* Non-business-steps */

    .node.non-business-step ellipse {
        fill: #ccc;
    }/* Status of a route / edge. *//* Route with status TRUE */

    .edge.status-true path {
        stroke: blue;
        stroke-width: 2;
    }

    .edge.status-true polygon {
        fill: blue;
        stroke: blue;
    }/* Route with status ALLOWS */

    .edge.status-allows path {
        stroke: blue;
        stroke-dasharray: 5;
        stroke-width: 2;
    }

    .edge.status-allows polygon {
        fill: blue;
        stroke: blue;
    }/* Route with status FALSE */

    .edge.status-false path {
        stroke: red;
        stroke-width: 2;
    }

    .edge.status-false polygon {
        fill: red;
        stroke: red;
    }/* Route with status UNTRAVERSABLE */

    .edge.status-untraversable path {
        stroke: red;
        stroke-dasharray: 5;
        stroke-width: 2;
    }

    .edge.status-untraversable polygon {
        fill: red;
        stroke: red;
    }/* Current state of a step / node. *//* Actualised business steps */

    .node.current-actualised ellipse {
        fill: #ccc;
    }/* Unactualised business steps */

    .node.current-unactualised ellipse {
        fill: fff;
    }/* CSS for the future state of a step / node. *//* Caused business steps */

    .node.future-true {
        stroke: blue;
    }/* Allowed business steps */

    .node.future-allows ellipse {
        stroke: blue;
        stroke-dasharray: 5;
    }/* Not allowed yet business steps */

    .node.future-false ellipse {
        stroke: red;
    }/* Not allowed now business steps */

    .node.future-untraversable ellipse {
        stroke: red;
        stroke-dasharray: 5;
    }
    </style>    
        <script src="https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.min.js"></script>
<script>
        var hpccWasm = window["@hpcc-js/wasm"];
    </script>
    </head>
<body>

<div id="graph"></div>
<script>
	var raw_dot = "digraph {node [width=1 fixedsize=true shape=rectangle fontname=\"sans-serif\" fontsize=\"18\"]; <%= render :partial => 'node', :collection => @steps %><%= render :partial => 'edge', :collection => @routes %> }";
	var dot = raw_dot.replace(/&quot;/g, '\"').replace(/&gt;/g, '>');

 hpccWasm.graphviz.layout(dot, "svg").then(svg => {
            const div = document.getElementById("graph");
            div.innerHTML = svg;
        });
</script>
</body>
</html>